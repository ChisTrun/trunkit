// Code generated by mykit. DO NOT EDIT.
// Version {{ .Version }}

package {{ .PackageName }}

import (
	"errors"
	"sort"

	"database/sql/driver"
)

func ({{ .Enum }}) Values() []string {
	var values []string
	{{ if not .AllowEnumZero -}}
	for key, name := range {{ .Enum }}_name {
		x := {{ .Enum }}(key)
		if x == 0 {
			continue
		}		
		values = append(values, name)
	}
	{{ else -}}
	for _, name := range {{ .Enum }}_name {
		values = append(values, name)
	}
	{{ end -}}

	sort.Strings(values)

	return values
}

func (x {{ .Enum }}) Value() (driver.Value, error) {
	{{ if not .AllowEnumZero -}}
	if x == 0 {
		return nil, errors.New("invalid enum value")
	}
	{{ end -}}
	
	value, ok := {{ .Enum }}_name[int32(x)]
	if !ok {
		return nil, errors.New("invalid enum value")
	}

	return value, nil
}

func (x *{{ .Enum }}) Scan(val any) error {
	var s string
	switch v := val.(type) {
	case nil:
		return nil
	case string:
		s = v
	case []byte:
		s = string(v)
	}

	value, ok := {{ .Enum }}_value[s]
	if !ok {
		*x = 0
		return nil
	}

	*x = {{ .Enum }}(value)

	return nil
}
