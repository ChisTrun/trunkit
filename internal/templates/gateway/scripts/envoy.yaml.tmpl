admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 18080 }
stats_sinks:
  - name: envoy.stat_sinks.dog_statsd
    typed_config:
      "@type": type.googleapis.com/envoy.config.metrics.v3.DogStatsdSink
      address:
        socket_address:
          address: $DOGSTATSD_HOST_IP
          port_value: 8125
          protocol: UDP
      prefix: envoy
stats_config:
  stats_matcher:
    exclusion_list:
      patterns:
        - prefix: "cluster.datadog_agent."
  stats_tags:
    - tag_name: "grpc_method"
      regex: "^cluster\\..*?\\.grpc\\.((.*)\\.)[^\\.]*$"
    - tag_name: "grpc_status_code"
      regex: "^cluster\\..*\\.grpc.*\\.([0-9]+)$"
    - tag_name: "grpc_web_method"
      regex: "^cluster\\..*?\\.grpc-web\\.((.*)\\.)[^\\.]*$"
    - tag_name: "grpc_web_status_code"
      regex: "^cluster\\..*\\.grpc-web.*\\.([0-9]+)$"
    - tag_name: "service_type"
      fixed_value: "gateway"
    - tag_name: "service_name"
      fixed_value: "{{ .GatewayServiceName | lowercase }}"
    - tag_name: "hostname"
      fixed_value: "$HOSTNAME"
static_resources:
  listeners:
    - name: listener_{{ .ProjectName | lowercase }}
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                upgrade_configs:
                  - upgrade_type: websocket
                codec_type: auto
                stat_prefix: {{ .ProjectName | lowercase }}
                tracing:
                  provider:
                    name: envoy.tracers.datadog
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.trace.v3.DatadogConfig
                      service_name: {{ .GatewayServiceName | lowercase }}
                      collector_cluster: datadog_agent
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                        json_format:
                          authority: "%REQ(:AUTHORITY)%"
                          bytes_received: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          method: "%REQ(:METHOD)%"
                          path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          protocol: "%PROTOCOL%"
                          response_code: "%RESPONSE_CODE%"
                          response_code_details: "%RESPONSE_CODE_DETAILS%"
                          response_flags: "%RESPONSE_FLAGS%"
                          grpc_status: "%GRPC_STATUS%"
                          start_time: "%START_TIME%"
                          upstream_host: "%UPSTREAM_HOST%"
                          user_agent: "%REQ(USER-AGENT)%"
                          x_envoy_upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                          x_request_id: "%REQ(X-REQUEST-ID)%"
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: /
                          route:
                            cluster: {{ .ProjectName | lowercase }}_http_cluster
                          typed_per_filter_config:
                            envoy.filters.http.ext_authz:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                              disabled: true
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: authorization,oauth,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,cookie,x-company-key,x-server-id
                        allow_credentials: true
                        max_age: "1728000"
                        expose_headers: grpc-status,grpc-message
                      response_headers_to_add:
                        - append: false
                          header:
                            key: x-request-id
                            value: "%REQ(X-REQUEST-ID)%"
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.grpc_stats
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
                      stats_for_all_methods: true
                      enable_upstream_stats: true
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: false
                      headers:
                        - exact_match: /status
                          name: :path
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          local sec_websocket = request_handle:headers():get("Sec-WebSocket-Protocol")
                          if sec_websocket ~= nil and sec_websocket ~= '' then
                            request_handle:headers():remove("Authorization")
                            request_handle:headers():add("Authorization", "Bearer "..sec_websocket)
                          end
                        end
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      grpc_service:
                        envoy_grpc:
                          cluster_name: {{ .ProjectName | lowercase }}_grpc_cluster
                        timeout: 5s
                      status_on_error:
                        code: 503
                      transport_api_version: V3
                  - name: envoy.filters.http.router

  clusters:
    - name: {{ .ProjectName | lowercase }}_grpc_cluster
      connect_timeout: 1s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: {{ .ProjectName | lowercase }}_grpc_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ .ProjectName | lowercase }}
                      port_value: 8765
    - name: {{ .ProjectName | lowercase }}_http_cluster
      connect_timeout: 5s
      type: logical_dns
      lb_policy: round_robin
      circuit_breakers:
        thresholds:
          - priority: DEFAULT
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
          - priority: HIGH
            max_connections: 1000000000
            max_pending_requests: 1000000000
            max_requests: 1000000000
            max_retries: 1000000000
      load_assignment:
        cluster_name: {{ .ProjectName | lowercase }}_http_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ .ProjectName | lowercase }}
                      port_value: 8766
      
    - name: datadog_agent
      connect_timeout: 0.25s
      lb_policy: round_robin
      type: STRICT_DNS
      load_assignment:
        cluster_name: datadog_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $DOGSTATSD_HOST_IP
                      port_value: 8126

